/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/boardgames/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read All Games
         * @description Returns a list of boardgames from the database, sorted by rank.
         */
        get: operations["read_all_games_boardgames__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/boardgames/{bgg_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Game
         * @description Returns a single board game from the database.
         */
        get: operations["read_game_boardgames__bgg_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** BoardgameComparison */
        BoardgameComparison: {
            /** Bgg Id */
            bgg_id: number;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Image Url */
            image_url: string | null;
            /** Thumbnail Url */
            thumbnail_url: string | null;
            /** Bgg Rank */
            bgg_rank: number;
            /** Bgg Geek Rating */
            bgg_geek_rating: number;
            /** Bgg Average Rating */
            bgg_average_rating: number;
            /** Bgg Rank Change */
            bgg_rank_change: number;
            /** Bgg Geek Rating Change */
            bgg_geek_rating_change: number;
            /** Bgg Average Rating Change */
            bgg_average_rating_change: number;
        };
        /** BoardgameWithHistoricalData */
        BoardgameWithHistoricalData: {
            /** Bgg Id */
            bgg_id: number;
            /** Name */
            name: string;
            /** Description */
            description: string | null;
            /** Image Url */
            image_url: string | null;
            /** Thumbnail Url */
            thumbnail_url: string | null;
            /** Bgg Rank */
            bgg_rank: number;
            /** Bgg Geek Rating */
            bgg_geek_rating: number;
            /** Bgg Average Rating */
            bgg_average_rating: number;
            /** Bgg Rank History */
            bgg_rank_history: components["schemas"]["RankHistory"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** RankHistory */
        RankHistory: {
            /**
             * Date
             * Format: date-time
             */
            date: string;
            /** Bgg Rank */
            bgg_rank: number | null;
            /** Bgg Geek Rating */
            bgg_geek_rating: number | null;
            /** Bgg Average Rating */
            bgg_average_rating: number | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_all_games_boardgames__get: {
        parameters: {
            query?: {
                date?: string | null;
                compare_to?: string | null;
                page?: number;
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardgameComparison"][];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_game_boardgames__bgg_id__get: {
        parameters: {
            query?: {
                start_date?: string | null;
                end_date?: string | null;
                mode?: string;
            };
            header?: never;
            path: {
                bgg_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardgameWithHistoricalData"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
