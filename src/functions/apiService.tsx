import { paths } from "../apischema"; // Import the types generated by openapi-typescript
import createClient from "openapi-fetch";
import type { Params } from "react-router-dom";
import parseLinkHeader from "./parseLinkHeader.tsx";
import { quartersInYear } from "date-fns/constants";

// Define the base URL
export const apiBaseUrl = "/api";

const client = createClient<paths>({
  baseUrl: apiBaseUrl,
});

export const boardgameListLoader = async ({
  request,
  params,
}: {
  request: Request;
  params: Params<"pageId">;
}) => {
  const queryParams: Record<string, string | number> = {};
  if (params.pageId) {
    queryParams.page = Number(params.pageId);
  }

  const url = new URL(request.url);
  const compareDate = url.searchParams.get("compare_to");
  if (compareDate) {
    queryParams.compare_to = compareDate
  }

  const { data, error, response } = await client.GET(
    "/boardgames/rank-history",
    {
      params: {
        query: queryParams,
      },
    },
  );
  if (error) {
    const status = response?.status || 500;
    const statusText = response?.statusText || "Unknown error";
    throw new Response(statusText, { status });
  }

  const links = parseLinkHeader(response.headers.get("link")!);

  return { data, links };
};

export const boardgameLoader = async ({
  request,
  params,
}: {
  request: Request;
  params: Params<"boardgameId">;
}) => {
  const url = new URL(request.url);

  const mode = url.searchParams.get("mode");
  const startDate = url.searchParams.get("start_date");
  const endDate = url.searchParams.get("end_date");

  const queryParams: Record<string, string | number> = {};
  if (mode) {
    queryParams.mode = mode;
  }
  if (startDate) {
    queryParams.start_date = startDate;
  }
  if (endDate) {
    queryParams.end_date = endDate;
  }
  const { data, error, response } = await client.GET("/boardgames/{bgg_id}", {
    params: {
      path: { bgg_id: Number(params.boardgameId!) },
      query: queryParams,
    },
  });
  if (error) {
    const status = response.status || 500;
    const errorMessage = error.detail || "Unknown error";

    throw new Response(errorMessage, { status });
  }

  return data;
};

export const forecastLoader = async ({
  params,
  searchParams,
}: {
  params: Params<"boardgameId">;
  searchParams?: {
    start_date?: string;
    end_date?: string;
  };
}) => {
  const { data, error, response } = await client.GET(
    "/boardgames/{bgg_id}/forecast",
    {
      params: {
        path: { bgg_id: Number(params.boardgameId!) },
        query: {
          start_date: searchParams?.start_date,
          end_date: searchParams?.end_date,
        },
      },
    },
  );
  if (error) {
    const status = response?.status || 500;
    const statusText = response?.statusText || "Unknown error";
    throw new Response(statusText, { status });
  }
  return data;
};

export const search = async ({ request }: { request: Request }) => {
  const url = new URL(request.url);
  const query = url.searchParams.get("query") || "";
  const limit = url.searchParams.get("limit") || "10";

  const queryParams = {
    query,
    ...(limit ? { limit: Number(limit) } : {}), // include limit only if provided
  };

  const { data, error, response } = await client.GET("/search", {
    params: {
      query: queryParams,
    },
  });

  if (error) {
    const status = response?.status || 500;
    const statusText = response?.statusText || "Unknown error";
    throw new Response(statusText, { status });
  }

  return { data };
};


export const designerGraphLoader = async ({}: {}) => {
  const { data, error, response } = await client.GET(
    "/designers/clusters",
  );
  if (error) {
    const status = response?.status || 500;
    const statusText = response?.statusText || "Unknown error";
    throw new Response(statusText, { status });
  }

  return data;
};
