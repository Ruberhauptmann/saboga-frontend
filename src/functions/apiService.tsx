import { paths } from '../apischema'; // Import the types generated by openapi-typescript
import createClient from "openapi-fetch";
import type {Params} from "react-router-dom";
import parseLinkHeader from "./parseLinkHeader.tsx";

// Define the base URL
export const apiBaseUrl = "/api/v1";

const client = createClient<paths>({
    baseUrl: apiBaseUrl,
});

export const boardgameListLoader = async ({ request, params }: { request: Request, params: Params<"pageId"> }) => {
    const url = new URL(request.url);
    const compare_to = url.searchParams.get("startDate");

    const queryParams: Record<string, string | number> = { };
    if (params.pageId) {
        queryParams.page = Number(params.pageId);
    }
    if (compare_to) {
        queryParams.compare_to = compare_to;
    }

    const {data, error, response} = await client.GET(
        "/boardgames/rank-history", {
            params: {
                query: queryParams,
            }
        }
    );
    if (error) {
        const status = response?.status || 500;
        const statusText = response?.statusText || "Unknown error";
        throw new Response(statusText, { status });
    }

    const links = parseLinkHeader(response.headers.get('link')!);

    return {data, links};
};

export const boardgameLoader = async ({ params }: { params: Params<"boardgameId"> }) => {
    const {data, error, response} = await client.GET("/boardgames/{bgg_id}", {
        params: {
            path: { bgg_id: Number(params.boardgameId!) },
        },
    });
    if (error) {
        const status = response.status || 500;
        const errorMessage = error.detail || "Unknown error";

        throw new Response(errorMessage, { status });
    }

    return data;
};

export const forecastLoader = async ({ params }: { params: Params<"boardgameId"> }) => {
    const {data, error, response} = await client.GET("/boardgames/{bgg_id}/forecast", {
        params: {
            path: { bgg_id: Number(params.boardgameId!) },
        },
    });
    if (error) {
        const status = response?.status || 500;
        const statusText = response?.statusText || "Unknown error";
        throw new Response(statusText, { status });
    }
    return data;
};
